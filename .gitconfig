[init]
    templatedir = ~/.git_templates
[core]
    excludesfile = ~/.gitignore.global
    whitespace = fix,-indent-with-non-tab,trailing-space,cr-at-eol
	pager = delta --theme 'base16' #--theme 'Solarized (light)'
	attributesfile = ~/.gitattributes
[interactive]
    diffFilter = delta --color-only
[absorb] # tummychow/git-absorb
    maxStack=10 # max number of commits to look into for fixup commits
[include]
    path = ~/.gitconfig.local # includes user section (name, email..)
[includeIf "gitdir:~/dev/work/"]
    path = ~/.gitconfig.work
[diff]
    tool = vimdiff
[push]
    default = simple
[rebase]
    autosquash = true
[branch]
    autosetupmerge = true
[merge]
    tool = vimdiff
    conflictstyle = diff3
[mergetool]
    prompt = false
    keepBackup = false
[difftool]
    prompt = false
[color]
    diff = auto
    status = auto
    branch = auto
    interactive = auto
    ui = auto
[color "branch"]
    current = yellow bold
    local = green bold
    remote = cyan
[color "status"]
    added = green bold
    changed = yellow bold
    deleted = red bold
    untracked = white
[log]
    decorate = true
    abbrevCommit = true
[alias]
    amend = commit --amend -v
    ammend = amend
    amen = commit --amend --no-edit
	revert-amend = reset --soft HEAD@{1}
	
	ack = grep --break --heading
	abbrev = !sh -c 'git rev-parse --short ${1-`echo HEAD`}' -

    cfg = config --global -l
    co = checkout
	cob = checkout -b

	count = !git --no-pager log --oneline | wc -l

	pushf = push --force-with-lease

	# from pro git by scott chacon
	last = log -1 HEAD
	unstage = reset HEAD --

    s = status -sb
    b = branch -avv
    f = fetch
    d = diff
    l = log --oneline
    lg = log --oneline --graph --decorate

    rdiff = diff @{upstream}
    # rm - untrack git tracked file. Specify file path after command
    untrack = rm -r --cached

    # Save work in progress. Only modified tracked files...
    save = "!git add -u; git commit -m \"Saving Work in Progress\""

    # Prune stale remote links to origin
    prune-origin = remote prune origin

	fresh = remote update --prune

	reword = commit --amend --only -v --

    # Undo previous commit and leave commit files in working tree
    undo = reset HEAD~ --mixed

    up = !git pull --rebase --prune $@

    # Prune local branches where HEAD commit already merged to develop
    prune-local = "!f() { git branch --merged master | grep -v 'master' | xargs -n 1 git branch -d; }; f"
    prune-tags = "fetch --prune origin +refs/tags/*:refs/tags/*"
    reset-fetch = "!git config remote.origin.fetch \"+refs/heads/*:refs/remotes/origin/*\"; git fetch origin"

    # log
    l = log
    lp = log -p
    lg = log --graph
    ls = log --pretty=format:\"%h %cr %cn %Cgreen%s%Creset\"
    lc = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(cyan)<%an>%Creset' --abbrev-commit --date=relative
    ll = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate

    # rebase
    rb = rebase
    rc = rebase --continue
    rs = rebase --skip

    whois = "!sh -c 'git log -i -1 --pretty=\"format:%an <%ae>\n\" --author=\"$1\"' -"
